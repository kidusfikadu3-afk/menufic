// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Restaurant {
    id          String   @unique @default(cuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    location    String
    contactNo   String
    isPublished Boolean
    menus       Menu[]   @relation("MenusOfRestaurant")
    image       Image?   @relation("ImageOfRestaurant", fields: [imageId], references: [id], onDelete: SetNull, onUpdate: SetNull)
    imageId     String?  @unique
    banners     Image[]  @relation("BannersOfRestaurant")

    @@id([id, userId])
    @@index([isPublished])
}

model Menu {
    id            String      @unique @default(cuid())
    userId        String
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    name          String
    availableTime String
    position      Int
    categories    Category[]  @relation("CategoriesOfMenu")
    restaurant    Restaurant? @relation("MenusOfRestaurant", fields: [restaurantId], references: [id])
    restaurantId  String?

    @@id([id, userId])
    @@index([restaurantId])
}

model Category {
    id        String     @unique @default(cuid())
    userId    String
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    name      String
    position  Int
    items     MenuItem[] @relation("MenuItemsOfCategory")
    menu      Menu?      @relation("CategoriesOfMenu", fields: [menuId], references: [id])
    menuId    String?

    @@id([id, userId])
    @@index([menuId])
}

model MenuItem {
    id          String    @unique @default(cuid())
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    name        String
    description String
    price       String
    position    Int
    category    Category? @relation("MenuItemsOfCategory", fields: [categoryId], references: [id])
    categoryId  String?
    image       Image?    @relation("ImageOfMenuItem", fields: [imageId], references: [id])
    imageId     String?   @unique

    @@id([id, userId])
    @@index([categoryId])
}

model Image {
    id               String      @unique
    path             String
    blurHash         String
    color            String
    menuItem         MenuItem?   @relation("ImageOfMenuItem")
    restaurant       Restaurant? @relation("ImageOfRestaurant")
    restaurantBanner Restaurant? @relation("BannersOfRestaurant", fields: [restaurantId], references: [id], onDelete: Restrict, onUpdate: Restrict)
    restaurantId     String?

    @@index([restaurantId])
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// SINGLE User model - REMOVED THE DUPLICATE
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("RESTAURANT_ADMIN")
  accounts      Account[]
  sessions      Session[]
  restaurants   Restaurant[]
  menus         Menu[]    
  categories    Category[] 
  menuItems     MenuItem[] 
  activityLogs  ActivityLog[] // ‚Üê ADD THIS LINE
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetUserId String?
  details   String?
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
}